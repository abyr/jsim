// Generated by CoffeeScript 1.6.2
(function() {
  var $, Document;

  Document = function(s) {
    this.init = function(s) {
      var s0;

      if (s === 'html') {
        return document.documentElement;
      }
      if (s === 'head') {
        return document.head;
      }
      if (s === 'body') {
        return document.body;
      }
      if (s.indexOf(',' === -1)) {
        window.console.log('single selector', s);
        s0 = s[0];
        s = s.substr(1);
        if (s0 === '#') {
          return this.byId(s);
        } else if (s0 === '.') {
          return this.byClass(s);
        } else {
          return this.byTag(s0 + s);
        }
      }
      return this.bySelectors(s);
    };
    this.byId = function(s) {
      window.console.log('by id', s);
      return document.getElementById(s);
    };
    this.byClass = function(s) {
      window.console.log('by class', s);
      return document.getElementsByClassName(s);
    };
    this.byTag = function(s) {
      window.console.log('by tag', s);
      return document.getElementsByTagName(s);
    };
    this.bySelectors = function(ss) {
      var i, list, selectors;

      window.console.log('by selectors', ss);
      selectors = ss.split(",");
      list = [];
      i = selectors.length - 1;
      while (i >= 0) {
        list.push(this.bySelector(selectors[i]));
        i--;
      }
      return list;
    };
    this.bySelector = function(s) {
      var s0;

      window.console.log('by selector', s);
      s0 = s[0];
      s = s.substr(1);
      if (s0 === '#') {
        return this.byId(s);
      } else if (s0 === '.') {
        return this.byClass(s);
      } else {
        return false;
      }
    };
    return this.init(s);
  };

  Element.prototype.html = function(v) {
    window.console.log(v);
    if (typeof v === 'undefined') {
      return this.innerHTML;
    }
    this.innerHTML = "" + v;
    return void 0;
  };

  Element.prototype.addClass = function(c) {
    this.className += " " + c + " ";
    return void 0;
  };

  Element.prototype.removeClass = function(c) {
    var r;

    r = new RegExp("\s" + c + '\\s?', 'gi');
    this.className = (" " + this.className).replace(r, '');
    if (this.className[0] === ' ') {
      this.className = this.className.substr(1);
    }
    return void 0;
  };

  Element.prototype.hasClass = function(c) {
    return this.className.split(" ").indexOf(c) !== -1;
  };

  Element.prototype.val = function() {
    return this.value;
  };

  $ = Document;

  window.$ = $;

}).call(this);
